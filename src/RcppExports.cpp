// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// mat_mult
SEXP mat_mult(SEXP m1_, SEXP m2_, int cores);
RcppExport SEXP _tfKernel_mat_mult(SEXP m1_SEXP, SEXP m2_SEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type m1_(m1_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type m2_(m2_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(mat_mult(m1_, m2_, cores));
    return rcpp_result_gen;
END_RCPP
}
// est_sig
std::vector<double> est_sig(SEXP mat_, int cores);
RcppExport SEXP _tfKernel_est_sig(SEXP mat_SEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(est_sig(mat_, cores));
    return rcpp_result_gen;
END_RCPP
}
// rbf_kern
SEXP rbf_kern(SEXP mat_, double sigma, int cores, bool lap);
RcppExport SEXP _tfKernel_rbf_kern(SEXP mat_SEXP, SEXP sigmaSEXP, SEXP coresSEXP, SEXP lapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< bool >::type lap(lapSEXP);
    rcpp_result_gen = Rcpp::wrap(rbf_kern(mat_, sigma, cores, lap));
    return rcpp_result_gen;
END_RCPP
}
// rbf_kern_nn
SEXP rbf_kern_nn(SEXP mat_, SEXP vec_, int cores, bool lap);
RcppExport SEXP _tfKernel_rbf_kern_nn(SEXP mat_SEXP, SEXP vec_SEXP, SEXP coresSEXP, SEXP lapSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< SEXP >::type vec_(vec_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< bool >::type lap(lapSEXP);
    rcpp_result_gen = Rcpp::wrap(rbf_kern_nn(mat_, vec_, cores, lap));
    return rcpp_result_gen;
END_RCPP
}
// dist_mat
SEXP dist_mat(SEXP mat_, int cores, bool squared);
RcppExport SEXP _tfKernel_dist_mat(SEXP mat_SEXP, SEXP coresSEXP, SEXP squaredSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< bool >::type squared(squaredSEXP);
    rcpp_result_gen = Rcpp::wrap(dist_mat(mat_, cores, squared));
    return rcpp_result_gen;
END_RCPP
}
// calc_nn
SEXP calc_nn(SEXP mat_, int cores, bool squared, int nn);
RcppExport SEXP _tfKernel_calc_nn(SEXP mat_SEXP, SEXP coresSEXP, SEXP squaredSEXP, SEXP nnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    Rcpp::traits::input_parameter< bool >::type squared(squaredSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    rcpp_result_gen = Rcpp::wrap(calc_nn(mat_, cores, squared, nn));
    return rcpp_result_gen;
END_RCPP
}
// linear_kern
SEXP linear_kern(SEXP mat_, int cores);
RcppExport SEXP _tfKernel_linear_kern(SEXP mat_SEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(linear_kern(mat_, cores));
    return rcpp_result_gen;
END_RCPP
}
// cosine_kern
SEXP cosine_kern(SEXP mat_, int cores);
RcppExport SEXP _tfKernel_cosine_kern(SEXP mat_SEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type mat_(mat_SEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(cosine_kern(mat_, cores));
    return rcpp_result_gen;
END_RCPP
}
// ngrams
SEXP ngrams(SEXP strs, SEXP n, SEXP rmdup);
RcppExport SEXP _tfKernel_ngrams(SEXP strsSEXP, SEXP nSEXP, SEXP rmdupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type strs(strsSEXP);
    Rcpp::traits::input_parameter< SEXP >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rmdup(rmdupSEXP);
    rcpp_result_gen = Rcpp::wrap(ngrams(strs, n, rmdup));
    return rcpp_result_gen;
END_RCPP
}
// ngrams_df
SEXP ngrams_df(SEXP df, SEXP n, SEXP rmdup, SEXP cores);
RcppExport SEXP _tfKernel_ngrams_df(SEXP dfSEXP, SEXP nSEXP, SEXP rmdupSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type df(dfSEXP);
    Rcpp::traits::input_parameter< SEXP >::type n(nSEXP);
    Rcpp::traits::input_parameter< SEXP >::type rmdup(rmdupSEXP);
    Rcpp::traits::input_parameter< SEXP >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(ngrams_df(df, n, rmdup, cores));
    return rcpp_result_gen;
END_RCPP
}
// get_tfidf
SEXP get_tfidf(SEXP df, bool notf);
RcppExport SEXP _tfKernel_get_tfidf(SEXP dfSEXP, SEXP notfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type df(dfSEXP);
    Rcpp::traits::input_parameter< bool >::type notf(notfSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tfidf(df, notf));
    return rcpp_result_gen;
END_RCPP
}
// get_tf_gene_binary
SEXP get_tf_gene_binary(SEXP df);
RcppExport SEXP _tfKernel_get_tf_gene_binary(SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tf_gene_binary(df));
    return rcpp_result_gen;
END_RCPP
}
// get_ji
SEXP get_ji(SEXP df, int cores);
RcppExport SEXP _tfKernel_get_ji(SEXP dfSEXP, SEXP coresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type df(dfSEXP);
    Rcpp::traits::input_parameter< int >::type cores(coresSEXP);
    rcpp_result_gen = Rcpp::wrap(get_ji(df, cores));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_tfKernel_mat_mult", (DL_FUNC) &_tfKernel_mat_mult, 3},
    {"_tfKernel_est_sig", (DL_FUNC) &_tfKernel_est_sig, 2},
    {"_tfKernel_rbf_kern", (DL_FUNC) &_tfKernel_rbf_kern, 4},
    {"_tfKernel_rbf_kern_nn", (DL_FUNC) &_tfKernel_rbf_kern_nn, 4},
    {"_tfKernel_dist_mat", (DL_FUNC) &_tfKernel_dist_mat, 3},
    {"_tfKernel_calc_nn", (DL_FUNC) &_tfKernel_calc_nn, 4},
    {"_tfKernel_linear_kern", (DL_FUNC) &_tfKernel_linear_kern, 2},
    {"_tfKernel_cosine_kern", (DL_FUNC) &_tfKernel_cosine_kern, 2},
    {"_tfKernel_ngrams", (DL_FUNC) &_tfKernel_ngrams, 3},
    {"_tfKernel_ngrams_df", (DL_FUNC) &_tfKernel_ngrams_df, 4},
    {"_tfKernel_get_tfidf", (DL_FUNC) &_tfKernel_get_tfidf, 2},
    {"_tfKernel_get_tf_gene_binary", (DL_FUNC) &_tfKernel_get_tf_gene_binary, 1},
    {"_tfKernel_get_ji", (DL_FUNC) &_tfKernel_get_ji, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_tfKernel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
